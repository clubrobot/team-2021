#ifndef __VL6180X_COMMONS_H
#define __VL6180X_COMMONS_H

typedef enum
{
    VL6180X_IDENTIFICATION__MODEL_ID = 0x000,
    VL6180X_IDENTIFICATION__MODEL_REV_MAJOR = 0x001,
    VL6180X_IDENTIFICATION__MODEL_REV_MINOR = 0x002,
    VL6180X_IDENTIFICATION__MODULE_REV_MAJOR = 0x003,
    VL6180X_IDENTIFICATION__MODULE_REV_MINOR = 0x004,
    VL6180X_IDENTIFICATION__DATE_HI = 0x006,
    VL6180X_IDENTIFICATION__DATE_LO = 0x007,
    VL6180X_IDENTIFICATION__TIME = 0x008, // 16-bit

    VL6180X_SYSTEM__MODE_GPIO0 = 0x010,
    VL6180X_SYSTEM__MODE_GPIO1 = 0x011,
    VL6180X_SYSTEM__HISTORY_CTRL = 0x012,
    VL6180X_SYSTEM__INTERRUPT_CONFIG_GPIO = 0x014,
    VL6180X_SYSTEM__INTERRUPT_CLEAR = 0x015,
    VL6180X_SYSTEM__FRESH_OUT_OF_RESET = 0x016,
    VL6180X_SYSTEM__GROUPED_PARAMETER_HOLD = 0x017,

    VL6180X_SYSRANGE__START = 0x018,
    VL6180X_SYSRANGE__THRESH_HIGH = 0x019,
    VL6180X_SYSRANGE__THRESH_LOW = 0x01A,
    VL6180X_SYSRANGE__INTERMEASUREMENT_PERIOD = 0x01B,
    VL6180X_SYSRANGE__MAX_CONVERGENCE_TIME = 0x01C,
    VL6180X_SYSRANGE__CROSSTALK_COMPENSATION_RATE = 0x01E, // 16-bit
    VL6180X_SYSRANGE__CROSSTALK_VALID_HEIGHT = 0x021,
    VL6180X_SYSRANGE__EARLY_CONVERGENCE_ESTIMATE = 0x022, // 16-bit
    VL6180X_SYSRANGE__PART_TO_PART_RANGE_OFFSET = 0x024,
    VL6180X_SYSRANGE__RANGE_IGNORE_VALID_HEIGHT = 0x025,
    VL6180X_SYSRANGE__RANGE_IGNORE_THRESHOLD = 0x026, // 16-bit
    VL6180X_SYSRANGE__MAX_AMBIENT_LEVEL_MULT = 0x02C,
    VL6180X_SYSRANGE__RANGE_CHECK_ENABLES = 0x02D,
    VL6180X_SYSRANGE__VHV_RECALIBRATE = 0x02E,
    VL6180X_SYSRANGE__VHV_REPEAT_RATE = 0x031,

    VL6180X_SYSALS__START = 0x038,
    VL6180X_SYSALS__THRESH_HIGH = 0x03A,
    VL6180X_SYSALS__THRESH_LOW = 0x03C,
    VL6180X_SYSALS__INTERMEASUREMENT_PERIOD = 0x03E,
    VL6180X_SYSALS__ANALOGUE_GAIN = 0x03F,
    VL6180X_SYSALS__INTEGRATION_PERIOD = 0x040,

    VL6180X_RESULT__RANGE_STATUS = 0x04D,
    VL6180X_RESULT__ALS_STATUS = 0x04E,
    VL6180X_RESULT__INTERRUPT_STATUS_GPIO = 0x04F,
    VL6180X_RESULT__ALS_VAL = 0x050,          // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_0 = 0x052, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_1 = 0x054, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_2 = 0x056, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_3 = 0x058, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_4 = 0x05A, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_5 = 0x05C, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_6 = 0x05E, // 16-bit
    VL6180X_RESULT__HISTORY_BUFFER_7 = 0x060, // 16-bit
    VL6180X_RESULT__RANGE_VAL = 0x062,
    VL6180X_RESULT__RANGE_RAW = 0x064,
    VL6180X_RESULT__RANGE_RETURN_RATE = 0x066,            // 16-bit
    VL6180X_RESULT__RANGE_REFERENCE_RATE = 0x068,         // 16-bit
    VL6180X_RESULT__RANGE_RETURN_SIGNAL_COUNT = 0x06C,    // 32-bit
    VL6180X_RESULT__RANGE_REFERENCE_SIGNAL_COUNT = 0x070, // 32-bit
    VL6180X_RESULT__RANGE_RETURN_AMB_COUNT = 0x074,       // 32-bit
    VL6180X_RESULT__RANGE_REFERENCE_AMB_COUNT = 0x078,    // 32-bit
    VL6180X_RESULT__RANGE_RETURN_CONV_TIME = 0x07C,       // 32-bit
    VL6180X_RESULT__RANGE_REFERENCE_CONV_TIME = 0x080,    // 32-bit

    VL6180X_RANGE_SCALER = 0x096, // 16-bit - see STSW-IMG003 core/inc/vl6180x_def.h

    VL6180X_READOUT__AVERAGING_SAMPLE_PERIOD = 0x10A,
    VL6180X_FIRMWARE__BOOTUP = 0x119,
    VL6180X_FIRMWARE__RESULT_SCALER = 0x120,
    VL6180X_I2C_SLAVE__DEVICE_ADDRESS = 0x212,
    VL6180X_INTERLEAVED_MODE__ENABLE = 0x2A3,
} VL6180X_Register_t;

#endif /* __VL6180X_COMMONS_H */